type VnftManagerEvents = enum {
  VFTContractIdSet,
  NewNFTMinted,
  NftBurned,
  TokenTransferred,
  NewAdminAdded: actor_id,
  Error: VnftManagerErrors,
};

type VnftManagerErrors = enum {
  OnlyAdminsCanDoThatAction,
  VftContractIdNotSet,
  ContractIsNotApproved,
  ErrorInVNFTContract: str,
  OperationWasNotPerformed,
};

type TokenMetadata = struct {
  name: str,
  description: str,
  media: str,
  reference: str,
};

type VnftManagerQueryEvents = enum {
  UserNumOfTokensOwned: u256,
  UserNumOfTokensOwnedAsu128: u128,
  NFTAddressApproved: opt actor_id,
  NFTOwner: actor_id,
  Error: VnftManagerErrors,
};

constructor {
  New : ();
  NewWithVnftContractId : (vnft_contract_id: actor_id);
};

service VnftManagerSvc {
  AddAdmin : (new_admin_address: actor_id) -> VnftManagerEvents;
  BurnNft : (from: actor_id, token_id: u256) -> VnftManagerEvents;
  MintNft : (to: actor_id, token_metadata: TokenMetadata) -> VnftManagerEvents;
  SetVftContractId : (vft_contract_id: actor_id) -> VnftManagerEvents;
  TransferFrom : (from: actor_id, to: actor_id, token_id: u256) -> VnftManagerEvents;
  query NftAddressApproved : (token_id: u256) -> VnftManagerQueryEvents;
  query NftOwnerByTokenId : (token_id: u256) -> VnftManagerQueryEvents;
  query NumOfNftsFromUser : (user_address: actor_id) -> VnftManagerQueryEvents;
  query NumOfNftsFromUserAsU128 : (user_address: actor_id) -> VnftManagerQueryEvents;
};

